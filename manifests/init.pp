# @summary Simple class to manage your event_notifier connectivity
#
# @example
#   include event_notifier
#
# @param [Optional][String] url
#   The url of the server that PE is running on
# @param [Optional[String]] token
#   The default Splunk HEC token
#   Note: The value of the token is converted to Puppet's Sensitive data type during catalog application.
# @param [Array] facts_allowlist
#   The list of facts that will be collected in the report. To collect all facts available add the special value 'all.facts'.
# @param [Boolean] enable_reports
#   Adds event_notifier to the list of report processors
# @param [Boolean] record_event
#   If set to true, will call store_event and save report as json
# @param [Boolean] disabled
#   Removes settings to send reports and facts to Splunk
# @param [Boolean] only_changes
#   When true, only reports with a changed status with be send to Splunk
# @param [Boolean] manage_routes
#   When false, will not automatically send facts to event_notifier
# @param [Boolean] events_reporting_enabled
#   When true, will send data from PE Event Forwarding module to Splunk
# @param [String] facts_terminus
#   Ensure that facts get saved to puppetdb
# @param [String] facts_cache_terminus
#   Makes sure that the facts get sent to event_notifier
# @param [Optional[Array]] facts_blocklist
#   The list of facts that will not be collected in the report
# @param [String] pe_console
#   The FQDN for the PE console
# @param [Optional[Integer]] timeout
#   Timeout limit for for both open and read sessions
# @param [Optional[String]] ssl_ca
#   The name of the ca certification/bundle for ssl validation of the event_notifier endpoint
# @param [Boolean] include_system_cert_store
#   By default, the certificates in the local system cert store are ignored. To include
#   these certificates for ssl validation of the event_notifier endpoint set to True
# @param [Boolean] fips_crl_check
#   By default, the Puppet HTTP Client will attempt to check the Splunk CA against the Splunk CRL.
#   Unless the Splunk HEC endpoint is configured with a certificate generated by the Puppet CA, set
#   this parameter to false to allow metrics to successfully send.
# @param [Boolean] fips_verify_peer
#   By default, the Puppet HTTP Client will attempt peer verfication. When utilizing a self-signed
#   certificate set this parameter to false to allow metrics to successfully send.
# @param [Optional[String]] token_summary
#   Corresponds to puppet:summary in the Puppet Report Viewer
#   When storing summary in a different index than the default token
#   Note: The value of the token is converted to Puppet's Sensitive data type during catalog application.
# @param [Optional[String]] token_facts
#   Corresponds to puppet:facts in the Puppet Report Viewer
#   When storing facts in a different index than the default token
#   Note: The value of the token is converted to Puppet's Sensitive data type during catalog application.
# @param [Optional[String]] token_metrics
#   Corresponds to puppet:metrics in the Puppet Report Viewer
#   When storing metrics in a different index than the default token
#   Note: The value of the token is converted to Puppet's Sensitive data type during catalog application.
# @param [Optional[String]] token_events
#   When storing events from pe_event_forwarding in a different index than the default token
#   Note: The value of the token is converted to Puppet's Sensitive data type during catalog application.
# @param [Optional[String]] url_summary
#   Similar to token_summary; used to store summary in a different index than the default url
# @param [Optional[String]] url_facts
#   Similar to token_facts; used to store facts in a different index than the default url
# @param [Optional[String]] url_metrics
#   Similar to token_metrics; used to store metrics in a different index than the default url
# @param [Optional[String]] url_events
#   Similar to token_events; used to store events from pe_event_forwarding in a different index than the default url
# @param [Optional[Array]] include_logs_status
#   Determines if puppet logs should be included based on the return status of the puppet agent run
#   Can be none, one, or any of the following: failed, changed, unchanged
# @param [Boolean] include_logs_catalog_failure
#   Include logs if catalog fails to compile
# @param [Boolean] include_logs_corrective_change
#   Include logs if there is a corrective change
#   Only a PE feature
# @param [Optional[Array]] include_resources_status
#   Determines if resource events should be included based on return status of puppet agent run
#   Does not include 'unchanged' status reports
#   Allowed values are: failed, changed, unchanged
# @param [Boolean] include_resources_corrective_change
#   Include resource events if there is a corrective change
#   Only a PE feature
# @param [String] summary_resources_format
#   If include_resource_corrective_change or include_resources_status is set and thus resource_events
#   are being sent as part of puppet:summary events, then can choose format.
#   Allowed values are: 'hash', 'array'
# @param [Array] event_types
#   Determines which events should be forwarded to Splunk
#   Allowed values are: 'orchestrator','rbac','classifier','pe-console','code-manager'
# @param [Optional[Array]] orchestrator_data_filter
#   Filters the jobs event data
# @param [Optional[Array]] rbac_data_filter
#   Filters the rbac event data
# @param [Optional[Array]] classifier_data_filter
#   Filters the classifier event data
# @param [Optional[Array]] pe_console_data_filter
#   Filters the pe_console event data
# @param [Optional[Array]] code_manager_data_filter
#   Filters the code_manager event data
class event_notifier (
  Optional[String] $url                                  = undef,
  Optional[String] $token                                = undef,
  Array $facts_allowlist                                 = ['dmi','disks','partitions','processors','networking'],
  Boolean $enable_reports                                = false,
  Boolean $record_event                                  = false,
  Boolean $disabled                                      = false,
  Boolean $only_changes                                  = false,
  Boolean $manage_routes                                 = false,
  Boolean $events_reporting_enabled                      = false,
  String $facts_terminus                                 = 'puppetdb',
  String $facts_cache_terminus                           = 'event_notifier',
  Optional[Array] $facts_blocklist                       = undef,
  String $pe_console                                     = $settings::report_server,
  Optional[Integer] $timeout                             = undef,
  Optional[String] $ssl_ca                               = undef,
  Boolean $include_system_cert_store                     = false,
  Boolean $fips_crl_check                                = true,
  Boolean $fips_verify_peer                              = true,
  Optional[String] $token_summary                        = undef,
  Optional[String] $token_facts                          = undef,
  Optional[String] $token_metrics                        = undef,
  Optional[String] $token_events                         = undef,
  Optional[String] $url_summary                          = undef,
  Optional[String] $url_facts                            = undef,
  Optional[String] $url_metrics                          = undef,
  Optional[String] $url_events                           = undef,
  Optional[Array] $include_logs_status                   = undef,
  Boolean $include_logs_catalog_failure                  = false,
  Boolean $include_logs_corrective_change                = false,
  Optional[Array] $include_resources_status              = undef,
  Boolean $include_resources_corrective_change           = false,
  String $summary_resources_format                       = 'hash',
  Array $event_types                                     = ['orchestrator','rbac','classifier','pe-console','code-manager'],
  Optional[Array] $orchestrator_data_filter              = undef,
  Optional[Array] $rbac_data_filter                      = undef,
  Optional[Array] $classifier_data_filter                = undef,
  Optional[Array] $pe_console_data_filter                = undef,
  Optional[Array] $code_manager_data_filter              = undef,
) {
  # Ensure required credential params are configured
  if (
    ($token == undef)
    and
    (($token_summary == undef) or ($token_facts == undef) or ($token_metrics == undef))
  ) {
    $authorization_failure_message = @(MESSAGE/L)
      Splunk HEC: Unless you are utilizing individual HEC tokens \
      ('token_summary', 'token_facts', 'token_metrics') \
      you must configure the 'token' parameter.
      |-MESSAGE
    fail($authorization_failure_message)
  }

  if (
    ($url == undef)
    and
    (($url_summary == undef) or ($url_facts == undef) or ($url_metrics == undef))
  ) {
    $authorization_failure_message = @(MESSAGE/L)
      Splunk HEC: Unless you are utilizing individual URLs \
      ('url_summary', 'url_facts', 'url_metrics') \
      you must configure the 'url' parameter.
      |-MESSAGE
    fail($authorization_failure_message)
  }

  # Account for the differences in Puppet Enterprise and Open Source and Agent
  $agent_node = $facts['event_notifier_agent_only_node']

  if $agent_node {
    $owner          = 'root'
    $group          = 'root'
  }
  elsif $facts['event_notifier_is_pe'] {
    $ini_setting    = 'pe_ini_setting'
    $ini_subsetting = 'pe_ini_subsetting'
    $service        = 'pe-puppetserver'
    $owner          = 'pe-puppet'
    $group          = 'pe-puppet'
  }
  else {
    $ini_setting    = 'ini_setting'
    $ini_subsetting = 'ini_subsetting'
    $service        = 'puppetserver'
    $owner          = 'puppet'
    $group          = 'puppet'
  }

  unless $disabled {
    $ensure_conf = present
  }
  else {
    $ensure_conf = absent
  }

  # Remove old settings files from v1.
  include event_notifier::v2_cleanup

  # Secure credential data
  $hec_secrets = {
    'token'         => $token,
    'token_summary' => $token_summary,
    'token_facts'   => $token_facts,
    'token_metrics' => $token_metrics,
    'token_events'  => $token_events,
  }
  $secrets = Deferred('event_notifier::secure', [$hec_secrets])

  if $enable_reports {
    # The subsetting resource automatically adds the 'event_notifier' report
    # processor to the reports setting if it hasn't yet been added there.  
    Resource[$ini_subsetting] { 'enable event_notifier':
      ensure               => $ensure_conf,
      path                 => '/etc/puppetlabs/puppet/puppet.conf',
      section              => 'master',
      setting              => 'reports',
      subsetting           => 'event_notifier',
      subsetting_separator => ',',
      notify               => Service[$service],
    }
  }

  file { "${settings::confdir}/event_notifier":
    ensure => directory,
    owner  => $owner,
    group  => $group,
  }

  if $manage_routes {
    file { "${settings::confdir}/event_notifier/event_notifier_routes.yaml":
      ensure  => file,
      owner   => $owner,
      group   => $group,
      mode    => '0640',
      content => epp('event_notifier/event_notifier_routes.yaml.epp'),
      notify  => Service[$service],
    }
    Resource[$ini_setting] { 'enable event_notifier_routes.yaml':
      ensure  => $ensure_conf,
      path    => '/etc/puppetlabs/puppet/puppet.conf',
      section => 'master',
      setting => 'route_file',
      value   => "${settings::confdir}/event_notifier/event_notifier_routes.yaml",
      require => File["${settings::confdir}/event_notifier/event_notifier_routes.yaml"],
      notify  => Service[$service],
    }
  }

  # Decide whether to write a settings file, and if so, how to write it. A
  # settings file written to an agent node does not need to notify a service
  # to restart.
  if !$agent_node {
    file { "${settings::confdir}/event_notifier/settings.yaml":
      ensure  => file,
      owner   => $owner,
      group   => $group,
      mode    => '0640',
      require => File["${settings::confdir}/event_notifier"],
      content => epp('event_notifier/settings.yaml.epp'),
      notify  => Service[$service],
    }
    file { "${settings::confdir}/event_notifier/hec_secrets.yaml":
      ensure  => file,
      owner   => $owner,
      group   => $group,
      mode    => '0600',
      require => File["${settings::confdir}/event_notifier"],
      content => Sensitive(Deferred('inline_epp', [file('event_notifier/hec_secrets.yaml.epp'), $secrets])),
      notify  => Service[$service],
    }
  } elsif $agent_node and $events_reporting_enabled {
    file { "${settings::confdir}/event_notifier/settings.yaml":
      ensure  => file,
      owner   => $owner,
      group   => $group,
      mode    => '0640',
      require => File["${settings::confdir}/event_notifier"],
      content => epp('event_notifier/settings.yaml.epp'),
    }
    file { "${settings::confdir}/event_notifier/hec_secrets.yaml":
      ensure  => file,
      owner   => $owner,
      group   => $group,
      mode    => '0600',
      require => File["${settings::confdir}/event_notifier"],
      content => Sensitive(Deferred('inline_epp', [file('sevent_notifier/hec_secrets.yaml.epp'), $secrets])),
    }
  }

  if $events_reporting_enabled {
    if (
      (($token == undef) and ($token_events == undef))
      or
      (($url == undef) and ($url_events == undef))
    ) {
      $authorization_failure_message = @(MESSAGE/L)
        Splunk HEC: Unless you are utilizing a specific URL \
        and token for events ('url_events', 'token_events') \
        you must configure the 'url' and 'token' parameters.
        |-MESSAGE
      fail($authorization_failure_message)
    }
    if $pe_event_forwarding::confdir != undef {
      $confdir_base_path = $pe_event_forwarding::confdir
    }
    else {
      $confdir_base_path = pe_event_forwarding::base_path($settings::confdir, undef)
    }

    file { "${confdir_base_path}/pe_event_forwarding/processors.d/event_notifier":
      ensure  => directory,
      owner   => $owner,
      group   => $group,
      require => [
        Class['pe_event_forwarding'],
        File["${settings::confdir}/event_notifier/settings.yaml"],
        File["${settings::confdir}/event_notifier/hec_secrets.yaml"],
      ],
    }

    file { "${confdir_base_path}/pe_event_forwarding/processors.d/event_notifier/util_event_notifier.rb":
      ensure  => file,
      owner   => $owner,
      group   => $group,
      mode    => '0755',
      content => template('event_notifier/util_event_notifier.erb'),
      require => File["${confdir_base_path}/pe_event_forwarding/processors.d/event_notifier"],
    }

    file { "${confdir_base_path}/pe_event_forwarding/processors.d/event_notifier.rb":
      ensure  => file,
      owner   => $owner,
      group   => $group,
      mode    => '0755',
      source  => 'puppet:///modules/event_notifier/event_notifier.rb',
      require => File["${confdir_base_path}/pe_event_forwarding/processors.d/event_notifier/util_event_notifier.rb"],
    }
  }
}
